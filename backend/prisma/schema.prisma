generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String        @id @default(cuid())
  phone               String        @unique
  password            String
  name                String
  location            String
  farmSize            Float
  sustainabilityScore Int           @default(0)
  carbonCreditScore   Float         @default(0.0) // New Carbon Score
  streak              Int           @default(0)
  lastLogin           DateTime?
  farmPlan            Json?
  posts               Post[]
  groupMemberships    GroupMember[]
  badges              UserBadge[]
  missions            UserMission[] // Relation to user's missions
}

model Group {
  id          String        @id @default(cuid())
  name        String        @unique
  description String
  members     GroupMember[]
  posts       Post[]
}

model GroupMember {
  userId  String
  groupId String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  group   Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)
  @@id([userId, groupId])
}

model Post {
  id        String   @id @default(cuid())
  content   String
  imageUrl  String?
  createdAt DateTime @default(now())
  authorId  String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  groupId   String
  group     Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
}

model Crop {
  id                  String @id @default(cuid())
  name                String @unique
  avgYieldPerAcre     Float
  avgMarketPricePerUnit Float
  avgInputCostPerAcre Float
}

model Badge {
  id          String      @id @default(cuid())
  name        String      @unique
  description String
  iconUrl     String
  users       UserBadge[]
}

model UserBadge {
  userId  String
  badgeId String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  badge   Badge  @relation(fields: [badgeId], references: [id], onDelete: Cascade)
  @@id([userId, badgeId])
}

// NEW MODELS FOR MISSIONS
model Mission {
  id                  String        @id @default(cuid())
  title               String
  description         String
  sustainabilityPoints Int
  carbonCreditPoints  Float
  users               UserMission[]
}

model UserMission {
  userId      String
  missionId   String
  status      String   @default("AVAILABLE") // AVAILABLE, COMPLETED
  completedAt DateTime?
  proofUrl    String?
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  mission     Mission  @relation(fields: [missionId], references: [id], onDelete: Cascade)

  @@id([userId, missionId])
}