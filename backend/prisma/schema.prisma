generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NEW MODEL for persistent weather caching
model WeatherCache {
  location    String   @id
  data        Json
  lastFetched DateTime @updatedAt
}

model User {
  id                  String        @id @default(cuid())
  phone               String        @unique
  password            String
  name                String
  location            String
  farmSize            Float
  sustainabilityScore Int           @default(0)
  carbonCreditScore   Float         @default(0.0)
  digitalTrustScore   Int           @default(50)
  streak              Int           @default(0)
  lastLogin           DateTime?
  farmPlan            Json?
  posts               Post[]
  groupMemberships    GroupMember[]
  badges              UserBadge[]
  missions            UserMission[]
  comments            Comment[]
}

model Group {
  id          String        @id @default(cuid())
  name        String        @unique
  description String
  members     GroupMember[]
  posts       Post[]
}

model GroupMember {
  userId  String
  groupId String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  group   Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)
  @@id([userId, groupId])
}

model Post {
  id        String    @id @default(cuid())
  content   String
  imageUrl  String?
  emoji     Json?
  createdAt DateTime  @default(now())
  authorId  String
  author    User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  groupId   String
  group     Group     @relation(fields: [groupId], references: [id], onDelete: Cascade)
  comments  Comment[]
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  authorId  String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Crop {
  id                  String @id @default(cuid())
  name                String @unique
  investmentPerAcre   Float
  revenuePerAcre      Float
}

model Badge {
  id          String      @id @default(cuid())
  name        String      @unique
  description String
  iconUrl     String
  users       UserBadge[]
}

model UserBadge {
  userId  String
  badgeId String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  badge   Badge  @relation(fields: [badgeId], references: [id], onDelete: Cascade)
  @@id([userId, badgeId])
}

model Mission {
  id                  String        @id @default(cuid())
  title               String
  description         String
  sustainabilityPoints Int
  carbonCreditPoints  Float
  trustPoints         Int
  users               UserMission[]
}

model UserMission {
  userId      String
  missionId   String
  status      String   @default("AVAILABLE") // AVAILABLE, COMPLETED
  completedAt DateTime?
  proofUrl    String?
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  mission     Mission  @relation(fields: [missionId], references: [id], onDelete: Cascade)
  @@id([userId, missionId])
}